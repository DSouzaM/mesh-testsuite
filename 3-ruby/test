#!/usr/bin/env python3

import argparse
import os
import sys
import time

from collections import defaultdict
from os import path
from random import shuffle
from sys import stderr, argv
from subprocess import Popen, PIPE
from shutil import copyfile

from config import configs
from cmd import run_cmd

MB = 1/1024.0/1024.0

USE_MSTAT = True
FREQ = 10

ROOT_DIR = os.getcwd()

TEST_DURATION = 10 # seconds


# from rainbow
def make_reporter(verbosity, quiet, filelike):
    '''
    Returns a function suitible for logging use.
    '''
    if not quiet:
        def report(level, msg, *args):
            'Log if the specified severity is <= the initial verbosity.'
            if level <= verbosity:
                if len(args):
                    filelike.write(msg % args + '\n')
                else:
                    filelike.write('%s\n' % (msg, ))
    else:
        def report(level, msg, *args):
            '/dev/null logger.'
            pass

    return report


ERROR = 0
WARN = 1
INFO = 2
DEBUG = 3
log = make_reporter(WARN, False, sys.stderr)


def tool(cmd, config):
    return path.join(ROOT_DIR, 'bin', '%s-%s' % (cmd, config))


REDIS_CLI = tool('redis-cli', 'jemalloc')


def slurp(file_name):
    with open(file_name, 'r') as f:
        return f.read().strip()


def get_rss(pid, stat = 'Pss'):
    memory = slurp('/proc/%d/smaps_rollup' % pid)
    lines = memory.splitlines()
    def get_stat(stat_name):
        line = [l for l in lines if l.startswith(stat + ':')][0]
        return float(line.split()[1])/1024.0

    return get_stat(stat)


def getpid(name):
    getpid_cmd = run_cmd('ps -u %s' % os.getuid()).join()
    lines = getpid_cmd.stdout.decode('utf8').splitlines()
    candidates = [l for l in lines if name in l]
    if len(candidates) > 1:
        raise Exception('multiple %s running!' % name)
    elif len(candidates) == 0:
        raise Exception('couldn\'t find %s' % name)
    log(DEBUG, 'candidates: %s', (candidates,))
    return int(candidates[-1].split()[0])


def test_frag(data_dir='.', detailed_mesh_stats=False, enabled_configs=None):
    '''
    Given a file containing commands, run them against each
    redis-server, recording memory usage.
    '''

    try:
        os.mkdir(data_dir)
    except:
        pass
    try:
        os.mkdir(path.join(data_dir, 'memory'))
    except:
        pass

    for config in configs:
        if config.skip:
            continue
        if enabled_configs and config.name not in enabled_configs:
            continue


        cmd = 'ruby ./frag.rb'
        if USE_MSTAT:
            env = ''
            if config.env:
                env = '-env ' + config.env
            mstat_results_path = path.join(data_dir, 'memory', 'ruby-frag-%s.%d.tsv' % (config.name, time.time()))
            cmd = 'mstat -o %s %s -freq %d -- %s' % (mstat_results_path, env, FREQ, cmd)

        start = time.time()
        run_cmd(cmd).join()
        end = time.time()

        print('%s\t%.3f' % (config.name, end - start))


def test_perf(data_dir='.', detailed_mesh_stats=False, enabled_configs=None):
    '''
    Given a file containing commands, run them against each
    redis-server, recording memory usage.
    '''

    try:
        os.mkdir(data_dir)
    except:
        pass
    try:
        os.mkdir(path.join(data_dir, 'speed'))
    except:
        pass

    with open(path.join(data_dir, 'speed', 'ruby-perf.%s.tsv' % (time.time(),)), 'w') as results:
        results.write('config\tseconds\n')
        for config in configs:
            if config.skip:
                continue
            if enabled_configs and config.name not in enabled_configs:
                continue

            cmd = 'ruby ./frag.rb'
            env = ''
            if config.env:
                env = '%s ' % (config.env)
            cmd = '%s%s' % (env, cmd)

            start = time.time()
            run_cmd(cmd).join()
            end = time.time()

            result_row = '%s\t%.3f\n' % (config.name, end - start)
            sys.stdout.write(result_row)
            results.write(result_row)


TESTS = {
    'frag': test_frag,
    'perf': test_perf,
}

def main():
    global log

    parser = argparse.ArgumentParser(description='Test redis with different allocators.')
    parser.add_argument('-v', action='store_const', const=True, help='verbose logging')
    parser.add_argument('--config', nargs='+', help='specific configs to run')
    parser.add_argument('tests', nargs='*', default=sorted(TESTS.keys()), help='specific tests to run')
    parser.add_argument('--data-dir', type=str, default='.', help='where to store results')
    parser.add_argument('--runs', type=int, default=5, help='Number of runs to do')
    args = parser.parse_args()

    if args.v:
        log = make_reporter(DEBUG, False, sys.stderr)

    for test in args.tests:
        for i in range(args.runs):
            # shuffle configs so that results aren't artifacts of order
            shuffle(configs)
            TESTS[test](enabled_configs=args.config, data_dir=args.data_dir)
            # try to give the CPU a sec to cool off
            time.sleep(1)


if __name__ == '__main__':
    sys.exit(main())
